package tiger_zone;

/**
 * The <code>Position</code> class represents a position on the <code>Board</code>.
 */
public class Position {
	private final int x;
	private final int y;

	/**
	 * Creates a new instance of <code>Position</code>.
	 *
	 * @param x the x coordinate
	 * @param y the y coordinate
	 */
	public Position(final int x, final int y) {
		this.x = x;
		this.y = y;
	}

	/**
	 * Returns the x coordinate of this position.
	 *
	 * @return the x coordinate
	 */
	public final int getX() {
		return this.x;
	}

	/**
	 * Returns the y coordinate of this position.
	 *
	 * @return the y coordinate
	 */
	public final int getY() {
		return this.y;
	}
	
	public final Position north() {
		return new Position(this.x, this.y + 1);
	}
	public final Position east() {
		return new Position(this.x + 1, this.y);
	}
	public final Position south() {
		return new Position(this.x, this.y - 1);
	}
	public final Position west() {
		return new Position(this.x - 1, this.y);
	}
	
	/**
	 * Auto-generated by Eclipse; this function performs a one-to-one mapping from an (x, y) pair (which Position is) to
	 * a unique value. This is absolutely necessary for storing Positions in HashMaps and HashSets. Without it, two
	 * Positions with the same x and y value may generate different hashCodes (and thus, appear as different things in
	 * the Map or Set).
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + x;
		result = prime * result + y;
		return result;
	}
	
	@Override
	public final boolean equals(Object p) {
		return p instanceof Position && this.x == ((Position)p).getX() && this.y == ((Position)p).getY();
	}
}
